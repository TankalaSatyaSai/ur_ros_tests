def unnamed():
  global _hidden_verificationVariable=0
  set_target_payload(2.000000, [0.000000, 0.000000, 0.000000], [0.004887, 0.004887, 0.004887, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  step_count_27335a1b_4ba3_40f1_8d7a_14818d57902a = 0.0
  thread Step_Counter_Thread_1a414a25_19c2_4bb0_84f8_764b7cacac0b():
    while (True):
      step_count_27335a1b_4ba3_40f1_8d7a_14818d57902a = step_count_27335a1b_4ba3_40f1_8d7a_14818d57902a + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_1a414a25_19c2_4bb0_84f8_764b7cacac0b()
  global Waypoint_1_p=p[.055246904129, -.644966127647, .101330129699, 1.550839133531, .228011981552, .229764425961]
  global Waypoint_1_q=[-1.277765897025203, -2.2584215413170368, -1.7179417936149433, -2.2989695064178868, 4.71349009465005, -3.748620106591716E-5]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_2_p=p[.055246904093, -.745808441116, .101330129697, 1.550839133531, .228011981552, .229764425961]
  global Waypoint_2_q=[-1.323718487608133, -2.4379760784008475, -1.3531914986742972, -2.4841573645448616, 4.667538921732529, 3.235873594888318E-4]
  while (True):
    $ 2 "Robot Program"
    $ 3 "MoveL"
    $ 4 "Waypoint_1" "breakAfter"
    movel(Waypoint_1_p, a=1.2, v=0.25)
    $ 5 "Direction: Tool X+"
    global move_thread_flag_5=0
    thread move_thread_5():
      enter_critical
      move_thread_flag_5 = 1
      local towardsPos=calculate_point_to_move_towards(get_forward_kin(), [1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.03)
      move_thread_flag_5 = 2
      exit_critical
    end
    move_thread_flag_5 = 0
    move_thread_han_5 = run move_thread_5()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_5
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.005, normalizedPosDir[1] * 0.005, normalizedPosDir[2] * 0.005, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 6 "Until (tool_contact_detection)"
        $ 7 "var_1≔get_actual_tcp_pose()"
        global var_1= get_actual_tcp_pose ()
        break
      end
      sync()
    end
    $ 8 "MoveL"
    $ 9 "Waypoint_2" "breakAfter"
    movel(Waypoint_2_p, a=1.2, v=0.25)
    $ 10 "Direction: Tool X+"
    global move_thread_flag_10=0
    thread move_thread_10():
      enter_critical
      move_thread_flag_10 = 1
      local towardsPos=calculate_point_to_move_towards(get_forward_kin(), [1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.03)
      move_thread_flag_10 = 2
      exit_critical
    end
    move_thread_flag_10 = 0
    move_thread_han_10 = run move_thread_10()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_10
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.005, normalizedPosDir[1] * 0.005, normalizedPosDir[2] * 0.005, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 11 "Until (tool_contact_detection)"
        $ 12 "var_2≔get_actual_tcp_pose()"
        global var_2= get_actual_tcp_pose ()
        break
      end
      sync()
    end
  end
end
